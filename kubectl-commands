kubectl get nodes              -> to check nodes of kubenetes
kubectl get nodes -o wide      -> to get flavor and version of Operating System on which the Kubernetes nodes are running
kubectl run nginx --image nginx -> creates a pod automatically and deploy an instance of the nginx docker image as container.
kubectl get pods               -> to list the pods available in our cluster.
kubectl describe pod nginx     -> provides additional info about the pod and container, image inside the pod.
kubectl create -f pod.config.yml -> to create yaml kubernetes yaml configuration file.
or
kubectl apply -f pod.yaml
kubectl edit pod image_name     -> to edit the image name inside the pod.
kubectl replace --force -f /tmp/kubectl-edit../..yaml    -> after making change inside the pod, this will delete the pod and creates new pod.


---REPLICASET ---

kubectl create -f replicaset-def.yaml  -> to create a replica set file.
kubectl get replicaset         -> to see the list of replicasets created
kubectl describe replicaset name-of-replicaset  -> to view more info about replicaset
kubectl delete replicaset replicaset-name   ->  to delete the replicaset and deletes all underlying pods.
kubectl replace -f replicaset-def.yaml   -> to replace or update the replicaset.
kubectl scale --replicas=6 -f replicaset-def.yaml  -> to scale the replicas simply from the command line.
kubectl delete pod pod-name    -> deleted the pod under replicaset.
kubectl edit replicaset name-of-replicaset  ->  to edit the yaml config file of replicaset.

--- Deployment ---

kubectl create deploy deploy-name --image=nginx --replicas=3 --dry-run=client -o wide > deploy.yaml
kubectl create -f deployment-def.yaml   -> creates deployment object and above that creates replicaset and pods inside that.
kubectl create -f deployment-def.yaml --record   -> record option instructs the kubernetes the cause of change.
kubectl get deployments       ->  shows all the deployment objects
kubectl get all               ->  shows deployments, replicasets, and pods
kubectl rollout status deployment/name-of-deploy  ->  shows the status of the rollout deployment
kubectl rollout history deployment/name-of-deploy ->  show the history & revisions of our deployment.
kubectl edit deployment name-of-deploy --record   ->  to edit the yaml file and records wt edited.
kubectl apply -f deployment-definition.yaml       ->  to apply the changes made in file and starts rolling update.
kubectl rollout undo deployment/name-of-deploy    ->  to rollback changes to the preveous deployment.
kubectl scale deployment nginx --replicas=5       ->  to scale the replicas inside the deployment
kubectl set image deployment nginx nginx=nginx:1.18 -> to set the image inside the deployment

--- service ---

kubectl create -f service-definition.yaml   -> to create a yaml file which helps the requests of user goes through the ports.
kubectl service servive-name --url       -> gives the url of the application running on the node.
kubectl describe service                 -> more info about service like ports, endpoints.
kubectl apply -f service-definition.yaml -> to apply the changes after editing the file.
minikube service list          ->  lists all services.

--- imperative commands ---

kubectl expose pod redis --name redis-service --port=6379    -> to create a service with pod and expose to port
kubectl run custom-nginx --image=nginx --port=8080           -> to create a pod with an image and expose it to the container port 
kubectl create namespace dev                                 -> to create a namespace
kubectl create deploy redis-deploy -n dev-ns --image=redis --replicas=2    -> to create a deployment in namespace with replicas.


--- ETCD ---

etcdctl --version              -> checks teh version of etcd
./etcdctl put key1 value1      -> updated the new value in the ectd store
./ectdctl get key1             -> extracts the value of the given key
kubectl get pods -n kube-system    -> to view the ectd which is configured as a pod by kubeadm
kubectl exec etcd-master -n kube-system   --> to enter in to the etcd pod
etcdctl get / --prefix -keys-only    ->  to list the keys that kubernetes stored.

--- Kube API-server ---

kube-apiserver.service            -> opens the file of kube API server options of cert files, urls, connectivities and many other options.
kubectl get pods -n kube-system   -> to view kube API server service deployed as pod in master  node.
cat /etc/kubernetes/manifests/kube-apiserver.yaml     -> in kubeadm setup, to see kube api server options from inside the pod in master node.
cat /etc/systemd/system/kube-apiserver.service        -> in non kubeadm service, to see kube API server options.
ps -aux | grep kube-apiserver          -> to search the processes running on master node with kube-api server.

--- kube controller manager ---

kube-controller-manager.service          -> to see all controllers and options after installation without kubeadm tool.
kubectl get pods -n kube-system         -> to view controller pod which runs on master node.
cat /etc/kubernetes/manifests/kube-controller-manager.yaml  ->   to see kube controller options in kubeadm env.
cat /etc/systemd/system/kube-controller-manager.service     ->  to view options in non kubeadm setup.
ps aux | grep kube-controller-manager    ->   to see running processes that are searching for kube controller.

--- kube scheduler ---

kube-scheduler.service        ->   to run it as a service ( without kubeadm tool )
kubectl get pods -n kube-system  ->   to see scheduling running as a pod in master node
cat /etc/kubernetes/manifests/kube-scheduler.yaml     ->    to see scheduling options.
ps aux | grep kube-scheduler      ->  to see running processes on master reg kube-scheduler.


--- kube-proxy ---

kubectl get pods -n kube-syatem    ->  to see the kube proxy pod in master node
kubectl get daemonset -n kube-system

--- Namespaces ---

kubectl get namespaces                -> to get all the namespaces available in our cluster.
kubectl get pods                              -> shows the pods from default namespace
kubectl get pods --namespace=kube-system      -> to list the pods from the other namespace called kube-system.
kubectl create pod pod-def.yaml               -> to create a pod with definition file in default namespace.
kubectl run redis --image=redis --namespace=finance   -> to create a pod with an image from CLI
kubectl create pod pod-def.yaml --namespace=dev -> to create a pod from pod definition file in dev namespace.
kubectl create namespace dev         -> to create a new namespace from CLI
kubectl create -f namespace-dev.yaml -> to create a new namespace from definition file.
kubectl get svc -n=dev       ->  to get the services from the dev namespace.


kubectl config set-context $(kubectl config current-context) --namespace=dev    -> to switch from one namespace to another one permanantly.

kubectl get pods --all-namespaces     -> to get the pods from all the namespaces.
          or 
kubectl get pods -A     

## Most Kubernetes resources (e.g. pods, services, replication controllers, and others) are in some namespaces. 
However namespace resources are not themselves in a namespace. And low-level resources, such as nodes and persistentVolumes,
are not in any namespace ##

kubectl api-resources --namespaced=true    -> To see which Kubernetes resources are in a namespace.
kubectl api-resources --namespaced=false   -> To see which Kubernetes resources are not in a namespace.

--- Labels and Selectors ---

kubectl get pods --selector app=app1       -> to get the pods with those labels 
kubectl get pods --selector env=prod,tier=frontend,bu=finance    -> to get the pods which are common in all environmets.



--- Taints and Tolerations ---
kubectl taint nodes node-name key=value:taint-effect    -> to assign a taint to a node with keys and values and effects.
kubectl taint nodes node01 spray=mortein:NoSchedule     
kubectl describe node node01 | grep -i taints           -> to check the taints of the master node in the cluster
kubectl taint nodes controlplane node-role.kubernetes.io/control-plane:NoSchedule-   -> to untain the taint from the node.


--- Node Affinity ---

kubectl label nodes node01 color=blue    -> to label a node


--- Daemonset ---

kubectl get daemonset -A     -> to get all daemonsets
kubectl describe daemonset name-of-daemonset    ->  to view more info
kubectl describe daemonset kube-flannel-ds --namespace=kube-flannel    -> to check info about  the daemonset in a perticular namespace.


--- static pods ---

kubectl run --restart=Never --image=busybox static-busybox --dry-run=client -o yaml > /etc/kubernetes/manifests/static-busybox.yaml -> 
to create a static pod.

cat /var/lib/kubelet/config.yaml  ->  to check config.yaml for static pod path


--- Scheduler ---

kubectl get pods -o wide        ->  to check the pods and scheduler which picked up that pod.
kubectl logs my-custom-scheduler --name-space=kube-system    -> to view the logs 


--- Deploy Metrics server ---

git clone https://github.com/kodekloudhub/kubernetes-metrics-server.git
cd kubernetes-metrics-server/
kubectl create -f .
kubectl top node
kubectl top pod

--- Monitor logs ---

docker logs -f container-name     -> to see the live logs of a container in docker
kubctl logs -f pod-name           -> to view the logs of container running in pod
kubectl logs -f pod-name container-name  -> if multiple containers are running in a pod.


--- Rolling Updates ---

kubectl create -f deployment-def.yaml          -> to create deployment    
kubectl get deployments
kubectl rollout status deployment/myapp-deployment     ->  to see the status of the rollout 
kubectl rollout history deployment/myapp-deployment    ->  to see the history and revisions of deployment.
kubectl apply -f deployment.yaml                       ->  to apply the changes after updating the container version in the deploy file.
kubectl describe deployment/myapp-deployment           ->  to view detailed info about the deployment 
kubectl get replicasets                                ->  to see old and new replicasets.
kubectl rollout undo deployment/myapp-deployment       ->  to comeback to the older version or revision of the application deployment.


--- Arguments & Commands ---

kubectl run webapp --image=nginx -- --color green    ->  to change override the arguments inside the docker file.
kubectl get configmaps
kubectl describe configmaps name-of-configmap
kubectl create configmap  webapp-config-map --from-literal=APP_COLOR=darkblue --from-literal=APP_OTHER=disregard




--- secrets ---

kubectl create secret generic db-secret --from-literal=DB_User=root --from-literal=DB_Password=password123   -> to create a secret imperative way.
kubectl create -f secrets.yaml    -> to create secrets definition file just like pod def file
echo -n 'mysql; | base64          -> to convert plain text to encoded format
kubectl get secrets               -> shows all the secrets files
kubectl describe secrets          -> shows the attributes of secrets and but hides values.
kubectl describe secrets secret-name  -> to see how many secrets are defined in a secret file.
kubectl get secret app-secret -o yaml  -> to view the values as well
echo -n 'hjcbwk=' | base64 --decode    -> to decode the values
kubectl get secrets --all-namespaces -o json | kubectl replace -f -   -> to ensure all the secret file encrypted.


--- multi-container ---

kubectl logs pod-name -n namespace       -> to see the logs if the pod.
kubectl -n namespace exec -it pod-name -- cat /log/pod-name.log     ->  to see the log by entering in to the pod.



--- Cluster Maintainance ---

kubectl drain node01 --ignore-daemonsets  -> to drain the node for upgrade
kubectl uncordon node01       ->  to undrain the node and to bering back to the cluster
kubectl drain node01 --ignore-daemonsets --force   -> to forcefully drain the node when the pod is not part of replicaset
kubectl cordon node01         ->  to drain the node without removing the pods and make unscheduled for any other pods


--- cluster upgrade ---

upgrade kubeadm in master node
kubeadm upgrade plan           -> gives good plan of upgrades
kubeadm upgrade apply v1.25.x  -> upgrade the master node
drain the master node for kubelet upgrade
upgrade kubelet
sudo systemctl daemon-reload
sudo systemctl restart kubelet

- NOW UPGRADE THE WORKER NODE -

ssh node01
upgrade kubeadm
kubeadm upgrade node
drain worker node from master node
upgrade kubelet
sudo systemctl daemon-reload
sudo systemctl restart kubelet


--- Certificates ---

openssl x509 -in < cert_path > -text -noout   ->  to see the details of the certificate 
kubectl get csr        -> to display all the certificate signing requests
kubectl certificate approve name        ->  to approve the certificate signing request
kubectl get csr agent-smith -o yaml     -> to check the yaml file of the CSR request from user
kubectl certificate deny agent-smith    -> to deny the CSR of user
kubectl delete csr agent-smith          -> to delete the csr object


--- kubeconfig ---

kubectl config view      -> to view the current config file 
kubectl config view --kubeconfig=my-custom-config    ->  to view the specific kubeconfig file we want 
kubectl config use-context prod-user@production      ->  to change the context used by the user in config file
kubectl config -h        -> to see all the other options to use for changing the details from cli


--- Role based Authorization ---

kubectl get roles                 -> to list roles
kubectl get roles -A
kubectl edit role role-name -n name  -> to view a role in an namespace
kubectl get rolebindings          -> to list role bindings
kubectl describe role developer   -> to view more details about the roles
kubectl describe rolebinding devuser-developer-binding   -> to view more details about the rolebinding
kubectl auth can-i create deployments     -> as a user to test we access or not
kubectl auth can-i delete pods            -> 
kubectl auth can-i create deployments --as dev-user  -> to test access for other user
kubectl auth can-i delete pods --as dev-user         -> 
kubectl auth can-i delete pods --as dev-user --namespace test -> to test in specific namespace

kubectl create role developer --namespace=default --verb=list,create,delete --resource=pods
kubectl create rolebinding dev-user-binding --namespace=default --role=developer --user=dev-user


--- Cluster Roles ---

kubectl get clusterroles --no-headers | wc -l    
kubectl get clusterrolebindings --no-headers | wc -l
kubectl describe clusterrole cluster-admin
kubectl create clusterrole node-admin --verb=list,create,delete,get,watch --resource=nodes
kubectl create clusterrolebinding michelle-binding --clusterrole=node-admin --user=michelle 
kubectl describe clusterrolebinding cluster-admin
kubectl api-resources --namespaced=true     -> to see all the resources which comes under namespace
kubectl api-resources --namespaced=false    -> to see all the resources which comes under cluster scoped 
kubectl create -f cluster-admin-role.yaml   -> object file to create a cluster role
kubectl create -f cluster-role-binding.yaml -> object file to bind the user to a cluster role.


--- service accounts ---

kubectl create serviceaccount dashboard-sa   -> to create service account in version 1.24
kubectl create token dashboard-sa        -> to create a token in version 1.24


--- security context ---

kubectl exec pod-name -- whoami    -> to know which user is running the pod


--- Network Policy ---

kubectl get networkpolicy


--- Persistent Volume ---

kubectl get persistentvolumeclaim 
kubectl create -f pvc-def.yaml
kubectl delete persistentvolumeclaim 
kubectl get pv
kubectl get pvc
kubectl get sc


                                     --- Networking ---


ip link    -> to list interfaces of the hosts ( eth0 )
ip addr    -> to see ip interfaces assigned to those interfaces
ip addr add 192.168.1.10/24 dev eth0     -> to set the ip addresses on the interfaces
cat /etc/network/interfaces        -> to persist the changes the after restart 
route    -> to see the routing table of the kernel
ip route add 192.168.2.0/24 via 192.168.1.1    -> to add entries in to the routing table 
ip route add 0.0.0.0 via 192.168.1.1    -> to route the request to the internet outside of our network.
cat /proc/sys/net/ipv4/ip-forward    -> to check ip-forwarding is enabled or not on the router host
cat /etc/sys/config     -> to check the ip-forward 
arp    -> to see the list of entries


---

cat /etc/hosts    -> to set the DNS name in the local host
cat /etc/resolv.conf    -> to configure the DNS server ip in our local host
cat /etc/nsswitch.conf    -> to check the entries of which DNS name host should look first either local DNS name or DNS server name


--- Network Namespace ---

ip netns add red     -> to create new network namespace
ip netns           -> to list all available network namespace
ip -n red link     -> to view the virtual interface inside the namespace
ip netns exec red arp   -> to see the entries inside the namespace.
ip netns exec red route  -> to see the routing table entries.

ip link add veth-red type veth peer name veth-blue    -> to create a virtual cable beween two namespaces
ip -n red link del veth-red     -> to delete a link between namespaces
ip link set veth-red netns red     -> to attach the interface to a namespace
ip -n red addr add 192.168.15.1 dev veth-red    -> to add ip address to the interface 
ip -n red link set veth-red up    -> to bring up the interface 
netstat -nplt | grep scheduler    -> to find out the port number of the component in the node 

------> create a bridge network for connecting the namespaces

ip link add v-net-0 type bridge    -> to create a bridge network for connecting namespaces
ip link add veth-red type veth peer name veth-red-br    -> to create a cable between namespace and the bridge.
ip link set veth-red netns red           -> to connect one end of cable to namespace
ip link set veth-red-br master v-net-0   -> to connect other end of cable to bridge network.
ip -n red addr add 192.168.15.1 dev veth-red    -> to add ip address to the interface of namespace
ip -n red link set veth-red up    -> to turn the device up.


-----> to reach the namespaces from host

ip addr add 192.168.15.2/24 dev v-net-0    -> to add ip address to the already existed interface on bridge network
ip route add 192.168.1.0/24 via 192.168.15.5   -> to reach the other network via the host interface.
ip route add default via 192.168.15.5     -> namespace to reach the internet via the local host interface.


----> Docker Networking

docker network ls    -> to see all the network docker connected to.
ip link add docker0 type bridge    -> 
ip addr     -> to see the ip of the bridge network
ip netns    -> to list the namespace in the container.
docker inspect namespace-id    -> to check the namespace
ip -n namespace-id addr    -> to check the ip address of the interface end attched to container
ip tables -nvL -t nat      -> to check the rule inside NAT  ip tables.


--- CNI plugin ---

cd /opt/cni/bin    -> all the available plugins stored
cd /etc/cni/net.d   -> configuration file of the cni plugin 


























































